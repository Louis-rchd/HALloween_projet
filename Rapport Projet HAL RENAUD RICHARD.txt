Rapport d'Avancement de Projet – HAL
IntroductionLe projet a pour objectif de développer des abstractions logicielles pour les fonctionnalités GPIO et USART de microcontrôleurs cibles. Le premier microcontrôleur pris en charge est l'Atmega328p (Arduino Uno), avec des extensions pour d'autres cibles telles que le Cortex-M7 ou le Tensilica LX106. Les fonctionnalités à implémenter incluent le contrôle des broches numériques (GPIO), la communication série (USART), et des extensions potentielles pour I2C et SPI.Avancement des Travaux
1. GPIO Abstraction
L'implémentation de l'abstraction GPIO pour l'Atmega328p est complète. Le module gpio.rs permet de :- Configurer une broche comme entrée ou sortie.- Lire et écrire sur les broches numériques.- Gérer les registres spécifiques au port en fonction du numéro de broche.Points Clés :- L’utilisation des instructions bas niveau avec asm! permet un contrôle précis des registres.- La vérification des limites des broches (0-13) assure une robustesse contre les erreurs d'entrée.Défis :- Compatibilité d’architecture : L'utilisation du module core::arch::asm pose des problèmes de compatibilité, car il n'est pas pris en charge sur certaines architectures comme AVR.- Extension Pull-Up/Pull-Down : Bien que cette fonctionnalité soit optionnelle, son implémentation pour différentes cibles nécessite une analyse approfondie des capacités matérielles.2. USART Abstraction
Nous avons développé deux modules USART pour les cibles Atmega328p et Cortex-M7.Atmega328p USART :Le module implémente l'initialisation et la gestion des canaux de transmission et réception via USART. Les messages peuvent être envoyés et lus, démontrant la communication série basique.Cortex-M7 USART :L'implémentation inclut :- Configuration des broches pour l'USART (TX/RX).- Utilisation de la bibliothèque stm32f7xx_hal pour simplifier les abstractions matérielles.- Gestion des erreurs avec la macro block!.Défis :- Différences Matérielles : L'adaptation du code pour différentes cibles (Atmega vs Cortex) nécessite des configurations spécifiques (registre, fréquence, broches).- Test Multi-MCU : La communication entre deux microcontrôleurs via USART, bien que prévue, n'a pas encore été testée dans un environnement matériel.3. SPI Abstraction
Deux modules SPI ont été créés pour les cibles Atmega328p (AtmegaSPI.rs) et Cortex-M7 (CortexSPI.rs). Ces implémentations permettent d'envoyer et de lire des données via SPI.Points Clés :- Utilisation des registres natifs pour l'Atmega328p.- Configuration des broches GPIO en mode alternatif pour le Cortex-M7.- Gestion des paramètres SPI tels que la polarité et la phase d'horloge.Défis :- Documentation Technique : Le registre SPI du Cortex-M7 a nécessité une analyse approfondie des spécifications.4. I2C Abstraction
Deux modules I2C ont été partiellement implémentés pour les cibles Atmega328p (Atmega_I2C.rs) et Cortex-M7 (Cortex_I2C.rs).Fonctionnalités :- Envoi de données à un esclave I2C.- Lecture des données depuis un esclave I2C.Défis :- Timing Précis : Les timings critiques (trame I2C) doivent être respectés pour éviter les erreurs de communication.- Test Inter-MCU : La communication entre le Cortex-M7 et l'Atmega328p via I2C n'a pas encore été validée.Organisation du Projet
Le projet respecte une architecture modulaire conforme aux exigences :- Les fonctionnalités GPIO, USART, SPI, et I2C sont encapsulées dans des modules séparés (gpio.rs, AtmegaUSART.rs, etc.).- Le fichier main.rs sélectionne dynamiquement les fonctionnalités en fonction de la cible définie.Difficultés Rencontrées
1 Compatibilité Inter-Architecture :- L’utilisation de bibliothèques bas niveau (core::arch::asm) a révélé des incompatibilités entre architectures (AVR, ARM).2 Tests Matériels :- Les tests des fonctionnalités SPI et I2C nécessitent un environnement physique avec plusieurs microcontrôleurs pour valider la communication inter-MCU.3 Documentations Incomplètes :- La documentation pour certaines bibliothèques spécifiques au STM32 ou à l’Atmega a ralenti le développement.4 Gestion des Délais :- Les boucles d'attente (asm!("nop")) utilisées pour simuler des délais peuvent être imprécises.ConclusionLe projet a atteint un stade fonctionnel pour les fonctionnalités de base GPIO, USART, SPI, et I2C. Cependant, les tests matériels et l'extension des fonctionnalités restent des étapes critiques pour valider et compléter l'implémentation.Thomas RENAUD – Louis RICHARD – OCC3